id: ustruct

specifiers:

  - name: BlueprintType
    group: Blueprint Logic
    type: flag
    utility: 3
    position: main
    comment: Setting this allows the struct to be added as a variable to Blueprints. To expose a struct to blueprints with `BlueprintReadOnly`, the struct must be marked with `BlueprintType`.
    documentation:
      text: Exposes this struct as a type that can be used for variables in Blueprints.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
  - name: NoExport
    group: C++
    type: flag
    utility: 1
    position: main
    comment: |
      "No autogenerated code will be created" means you don't need to write `GENERATED_BODY`
    documentation:
      text: No autogenerated code will be created for this class; the header is only provided for parsing metadata.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
      #- name: Deprecated
      #  group: Display
      #  type: flag
      #  comment: Doesn't seem to work for `USTRUCT`?
      #
      #- name: DeprecationMessage
      #  group: Display
      #  type: string
      #  position: meta
      #  comment: Doesn't seem to work for `USTRUCT`?
      #  documentation:
      #    text: Deprecated classes with this metadata will include this text with the standard deprecation warning that Blueprint Scripts generate during compilation.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: DisplayName
      #  group: Display
      #  type: string
      #  position: meta
      #  documentation:
      #    text: The name of this node in a Blueprint Script will be replaced with the value provided here, instead of the code-generated name.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: DontUseGenericSpawnObject
      #  group: Display
      #  type: flag
      #  position: meta
      #  documentation:
      #    text: Do not spawn an Object of the class using Generic Create Object node in Blueprint Scripts; this specifier applies only to Blueprint-type classes that are neither Actors nor Actor Components.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: ExposedAsyncProxy
      #  group: Display
      #  type: flag
      #  position: meta
      #  documentation:
      #    text: Expose a proxy Object of this class in Async Task nodes.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: IgnoreCategoryKeywordsInSubclasses
      #  group: Display
      #  type: flag
      #  position: meta
      #  documentation:
      #    text: Used to make the first subclass of a class ignore all inherited ShowCategories and HideCategories Specifiers.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: KismetHideOverrides
      #  group: Display
      #  type: string
      #  type-comment: Comma-separated list of event names
      #  position: meta
      #  documentation:
      #    text: List of Blueprint events that are not allowed to be overridden.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: ProhibitedInterfaces
      #  group: Display
      #  type: string
      #  type-comment: Comma-separated list of interfaces
      #  position: meta
      #  documentation:
      #    text: Lists Interfaces that are not compatible with the class.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: RestrictedToClasses
      #  group: Display
      #  type: string
      #  type-comment: Comma-separated list of class names
      #  position: meta
      #  documentation:
      #    text: Blueprint function library classes can use this to restrict usage to the classes named in the list.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: ShowWorldContextPin
      #  group: Display
      #  type: flag
      #  position: meta
      #  documentation:
      #    text: Indicates that Blueprint nodes placed in graphs owned by this class must show their World context pins, even if they are normally hidden, because Objects of this class cannot be used as World context.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
      #- name: Keywords
      #group: Display
      #type: string
      #type-comment: Comma-separated
      #position: meta
  
  - name: ToolTip
    group: Display
    position: meta
    type: flag
    utility: 2
    related: [ ShortToolTip ]
    documentation:
      text: Overrides the automatically generated tooltip from code comments.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/metadata-specifiers-in-unreal-engine#structmetadataspecifiers
  
  
  - name: ShortToolTip
    group: Display
    type: string
    utility: 2
    position: meta
    related: [ ToolTip ]
    comment:
        |
        The tooltip returned when passing true for `bShortTooltip` in `GetTooltTipText`. Can be used in conjunction with `ToolTip` or a code comment.

        Used for USTRUCT only by Niagara in the engine.
    samples:
      - |
        USTRUCT(BlueprintType, meta = (ShortToolTip = "Short Tooltip for my Struct"))
        struct FMyStruct
        {
          GENERATED_BODY()
        };
      - |
        // Retrieve the FMyStruct short tooltip
        UStruct* MyStruct = FMyStruct::StaticStruct();
        FText ShortTooltip = MyStruct->GetToolTipText(/*bShortTooltip*/ true);
    documentation:
      text: A short tooltip that is used in some contexts where the full tooltip might be overwhelming, such as the Parent Class Picker dialog.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/metadata-specifiers-in-unreal-engine#structmetadataspecifiers
  
  
  - name: HiddenByDefault
    group: Blueprint Logic
    type: flag
    position: meta
    documentation:
      text: Pins in Make and Break nodes are hidden by default.
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
  
    #- name: CanFlattenStruct
    #- name: Abstract
    #- name: Experimental
    #- name: DocumentationPolicy
    #  type: string
    #- name: MenuDescSuffix
    #- name: NiagaraClearEachFrame
    #- name: NiagaraInternalType
    #- name: NodeColor
    #- name: PrototypeName
    #- name: ScriptName
  
  
    #- name: Constant
    #- name: TitleColor
    #- name: Varying
  
  
  
  
  
  - name: DisableSplitPin
    group: Blueprint Logic
    type: flag
    position: meta
    related: [ HasNativeMake, HasNativeBreak ]
    comment: |
      "Split Struct Pin" is an option available when right-clicking the return node of a `UFUNCTION`. It is only available if all the variables within the struct are exposed to blueprints, and if `DisableSplitPin` is not present in the USTRUCT definition.
  
      Why you might want to use it is a more interesting question. The only example of this being used in the codebase is with `FGameplayTag`. Gameplay tags are structs but only contain an `FName` property that is used as their ID. I suppose that `DisableSplitPin` is used because Epic wanted to discourage users from splitting the struct out to `FName` when it's much more helpful to keep it as an `FStruct` and use all the helper functions within.
    documentation:
      text: Indicates that node pins of this struct type cannot be split
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
    samples:
      - |
        USTRUCT(meta=(DisableSplitPin))
        struct FGameplayTag
        {
            GENERATED_BODY()
            UPROPERTY(VisibleAnywhere, Category = GameplayTags)
            FName TagName;
        };
    images: [ /ustruct/disablesplitpin.jpg ]
  
  
  - name: HasNativeBreak
    group: Blueprint Logic
    type: string
    type-comment: Function name
    utility: 1
    position: meta
    related: [ HasNativeMake, DisableSplitPin ]
    documentation:
      text: Indicates that the struct has a custom break node (and what the path to the BlueprintCallable UFunction is) that should be used instead of the default BreakStruct node.  
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
    comment: |
      `HasNativeBreak` lets you specify a static `UFUNCTION()` to use instead of the default behavior when a user chooses "Break (Struct)"
  
      By default all properties marked as `BlueprintReadOnly` or `BlueprintReadWrite` would be present in the node. Defining a native break function can let you customize what is present in that node.
    samples:
      - |
        USTRUCT(BlueprintType, meta = (HasNativeBreak = "ExampleProject.CatHelperLibrary.BreakCatStruct"))
        struct FCat
        {
          GENERATED_BODY()
        public:
          UPROPERTY()
          FString Name;
          UPROPERTY()
          FLinearColor CoatColor;
          UPROPERTY()
          FString SecretPetName;
        };
      
        UCLASS()
        class UCatHelperLibrary : public UBlueprintFunctionLibrary
        {
          GENERATED_BODY()
        public:
          UFUNCTION(BlueprintPure, Category = "Cat", meta = (BlueprintThreadSafe))
          static void BreakCatStruct(const FCat& Cat, FString& OutName, FLinearColor& OutCoatColor);
        };
        void UCatHelperLibrary::BreakCatStruct(const FCat& Cat, FString& OutName, FLinearColor& OutCoatColor)
        {
          OutName = Cat.Name;
          OutCoatColor = Cat.CoatColor;
        }
    images: [ /ustruct/hasnativebreak.jpg ]
  
  
  - name: HasNativeMake
    group: Blueprint Logic
    type: string
    type-comment: Function name
    utility: 1
    related: [ HasNativeBreak, DisableSplitPin ]
    position: meta
    images: [ /ustruct/hasnativemake.jpg ]
    comment: |
      Similar to `HasNativeBreak`, `HasNativeMake` allows you to specify a `static` `UFUNCTION()` to use to create and fill the values of a struct, without having to make the values within the struct `BlueprintReadWrite`.
  
    documentation:
      text: Indicates that the struct has a custom make node (and what the path to the BlueprintCallable UFunction is) that should be used instead of the default MakeStruct node.  
      source: "https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h"
    samples:
      - |
        USTRUCT(BlueprintType, meta = (HasNativeMake = "ExampleProject.CatHelperLibrary.MakeCatStruct"))
        struct FCat
        {
          GENERATED_BODY()
        public:
          UPROPERTY()
          FString Name;
          UPROPERTY()
          FLinearColor CoatColor;
          UPROPERTY()
          FString SecretPetName;
        };
        
        UCLASS()
        class UCatHelperLibrary : public UBlueprintFunctionLibrary
        {
          GENERATED_BODY()
        public:
          UFUNCTION(BlueprintPure, Category = "Cat", meta = (BlueprintThreadSafe))
          static FCat MakeCatStruct(FString Name, FLinearColor CoatColor);
        };
  
        FCat UCatHelperLibrary::MakeCatStruct(FString Name, FLinearColor CoatColor)
        {
          FCat Cat;
          Cat.Name = Name;
          Cat.CoatColor = CoatColor;
          return Cat;
        }
  
  
  
  
  
  #- name: BlueprintSpawnableComponent
  #  group: Unknown
  #  type: flag
  #  position: meta
  #  comment: This is listed in the `USTRUCT` documentation but it is not used inside `USTRUCT` the codebase and the documentation explicitly references components, which are classes and not structs. I think this is an error.
  #  documentation:
  #    text: If present, the component Class can be spawned by a Blueprint.
  #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
  
  #- name: UsesHierarchy
  #  group: Deprecated
  #  type: flag
  #  position: meta
  #  comment: The official documentation lists this for both `UCLASS` and `USTRUCT` but there are no instances of it being used in the codebase and **no code that seems to recognise it**. So I think it's maybe legacy or something someone forgot.
  #  documentation:
  #    text: Indicates the class uses hierarchical data. Used to instantiate hierarchical editing features in Details panels.
  #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  #
  #- name: IsBlueprintBase
  #  group: Unknown
  #  type: bool
  #  position: meta
  #  comment: This is listed on the official documentation pages for both `UCLASS` and `USTRUCT` but as far as I can tell it does not make sense for `USTRUCT`. It is possible to create struct data types within the editor, but you cannot subclass them from C++-defined `USTRUCT`s. I think this is a mistake
  #  documentation:
  #    text: "States that this class is (or is not) an acceptable base class for creating Blueprints, similar to the Blueprintable or 'NotBlueprintable` Specifiers."
  #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
  
  
  - name: Immutable
    group: Deprecated
    type: flag
    position: main
    documentation:
      text: Immutable is only legal in Object.h and is being phased out, do not use on new structs!.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
  
  - name: Atomic
    group: Deprecated
    type: flag
    position: main
    comment: This is listed in the official documentation but I can't find a single use of it inside the Unreal Engine codebase.
    documentation:
      text: Indicates that this struct should always be serialized as a single unit. No autogenerated code will be created for this class; the header is only provided to parse metadata from.
      source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
      #- name: BlueprintThreadSafe
      #  group: Unknown
      #  type: flag
      #  position: meta
      #  comment: Listed on the `USTRUCT` docs page but is only relevant to `UCLASS` blueprint function libraries.
      #  documentation:
      #    text: Only valid on Blueprint function libraries. This specifier marks the functions in this class as callable on non-game threads in animation Blueprints.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: ChildCannotTick
      #  group: Unknown
      #  type: flag
      #  position: meta
      #  comment: This is listed in the official documentation but I can't find a single use of it inside the Unreal Engine codebase.
      #  documentation:
      #    text: Used for Actor and Component classes. If the native class cannot tick, Blueprint-generated classes based this Actor or Component can never tick, even if bCanBlueprintsTickByDefault is true.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
      #
      #- name: ChildCanTick
      #  group: Display
      #  type: flag
      #  position: meta
      #  documentation:
      #    text: Used for Actor and Component classes. If the native class cannot tick, Blueprint-generated classes based this Actor or Component can have the bCanEverTick flag overridden, even if bCanBlueprintsTickByDefault is false.
      #    source: https://dev.epicgames.com/documentation/en-us/unreal-engine/struct-specifiers
  
